<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright 2016 Ruhr-UniversitÃ¤t Bochum.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<schema xmlns="http://www.w3.org/2001/XMLSchema"
		xmlns:tm="http://nds.rub.de/oidc/test-model"
		targetNamespace="http://nds.rub.de/oidc/test-model"
		elementFormDefault="qualified"
		attributeFormDefault="unqualified"
		version="1.0.0">

	<!-- Test Object -->

	<element name="TestObject" type="tm:TestObjectType" />
	<complexType name="TestObjectType">
		<sequence>
			<!--<choice>-->
				<!--<element name="TestRPConfig" type="tm:TestRPConfigType" />-->
				<!--<element name="TestOPConfig" type="tm:TestOPConfigType" />-->
			<!--</choice>-->
			<element name="TestConfig" type="tm:TestConfigType" />
			<element name="TestReport" type="tm:TestReportType" minOccurs="0" />
		</sequence>
		<attribute name="TestId" type="NCName" use="required" />
		<attribute name="TestPlanReference" type="normalizedString" use="required" />
	</complexType>

<complexType name="TestConfigType" abstract="true">
	<attribute name="Type" type="string" />
</complexType>

	<complexType name="TestRPConfigType">
		<complexContent>
			<extension base="tm:TestConfigType">
				<sequence>
					<element name="HonestWebfingerResourceId" type="normalizedString" />
					<element name="EvilWebfingerResourceId" type="normalizedString" />
					<element name="UrlClientTarget" type="anyURI" minOccurs="0" />
					<element name="InputFieldName" type="NCName" minOccurs="0" />
					<element name="SeleniumScript" type="string" minOccurs="0" />
					<element name="FinalValidUrl" type="anyURI" minOccurs="0" />
					<element name="HonestUserNeedle" type="string" minOccurs="0" />
					<element name="EvilUserNeedle" type="string" minOccurs="0" />
					<element name="ProfileUrl" type="anyURI" minOccurs="0" />
					<!--<element name="FinalInvalidUrl" type="anyURI" minOccurs="0" />-->
					<!--<element name="InvalidReturnCode" type="nonNegativeInteger" minOccurs="0" />-->
				</sequence>
			</extension>
		</complexContent>


	</complexType>

	<complexType name="TestOPConfigType">
		<complexContent>
			<extension base="tm:TestConfigType">
				<sequence>
					<element name="OPUrl" type="anyURI" />
					<element name="UserCredentials" type="tm:UserCredentialsType" />
					<element name="CodeRequestUrl" type="anyURI" />
					<element name="TokenRequestUrl" type="anyURI" />
					<element name="ClientCredentials" type="tm:ClientCredentialsType" />
					<element name="LoginFormHelp" type="string" minOccurs="0" />
				</sequence>
			</extension>
		</complexContent>
	</complexType>

	<complexType name="UserCredentialsType">
		<choice>
			<sequence>
				<element name="Username" type="string" />
				<element name="Password" type="string" />
			</sequence>
		</choice>
	</complexType>

	<complexType name="ClientCredentialsType">
		<choice>
			<sequence>
				<element name="ClientId" type="string" />
				<element name="ClientSecret" type="string" />
			</sequence>
		</choice>
	</complexType>


	<!-- Test Report -->

	<complexType name="TestReportType">
		<sequence>
			<element name="TestStepResult" type="tm:TestStepResultType" minOccurs="0" maxOccurs="unbounded" />
		</sequence>
	</complexType>

	<element name="TestResult">
		<!-- model as Element to prevent problems with glassfish and JAXRS -->
		<complexType>
			<complexContent>
				<extension base="tm:TestStepResultType">
					<sequence />
				</extension>
			</complexContent>
		</complexType>
	</element>
	<complexType name="TestStepResultType">
		<sequence>
			<element name="StepReference" type="tm:TestStepType" />
			<element name="Result" type="tm:TestStepResult" />
			<element name="LogEntry" type="tm:LogEntryType" minOccurs="0" maxOccurs="unbounded" />
		</sequence>
	</complexType>

	<simpleType name="TestStepResult">
		<restriction base="string">
			<enumeration value="PASS" />
			<enumeration value="NOT_RUN" />
			<enumeration value="UNDETERMINED" />
			<enumeration value="FAIL" />
		</restriction>
	</simpleType>

	<complexType name="LogEntryType">
		<sequence>
			<element name="Date" type="dateTime" />
			<choice>
				<element name="Text" type="string" />
				<element name="Screenshot" type="tm:ScreenshotEntryType" />
				<element name="HttpRequest" type="tm:HttpRequestEntryType" />
				<element name="HttpResponse" type="tm:HttpResponseEntryType" />
			</choice>
		</sequence>
	</complexType>

	<complexType name="ScreenshotEntryType">
		<sequence>
			<element name="Data" type="base64Binary" />
			<element name="MimeType" type="token" />
		</sequence>
	</complexType>

	<complexType name="HttpRequestEntryType">
		<sequence>
			<element name="RequestLine" type="normalizedString" />
			<element name="Header" type="tm:HeaderType" minOccurs="0" maxOccurs="unbounded" />
			<element name="Body" type="string" minOccurs="0" />
		</sequence>
	</complexType>

	<complexType name="HttpResponseEntryType">
		<sequence>
			<element name="Status" type="nonNegativeInteger" />
			<element name="Header" type="tm:HeaderType" minOccurs="0" maxOccurs="unbounded" />
			<element name="Body" type="string" minOccurs="0" />
		</sequence>
	</complexType>

	<complexType name="HeaderType">
		<simpleContent>
			<extension base="string">
				<attribute name="Key" type="string" use="required" />
			</extension>
		</simpleContent>
	</complexType>


	<!-- Test Plan -->

	<element name="TestPlan" type="tm:TestPlanType" />
	<complexType name="TestPlanType">
		<sequence>
			<element name="SuiteParameters" minOccurs="0">
				<complexType>
					<sequence>
						<element name="Parameter" type="tm:ParameterType" minOccurs="0" maxOccurs="unbounded" />
					</sequence>
				</complexType>
			</element>
			<element name="LearningStep" type="tm:TestStepType" />
			<element name="TestStep" type="tm:TestStepType" maxOccurs="unbounded" />
		</sequence>
		<attribute name="Name" type="normalizedString" use="required" />
	</complexType>

	<complexType name="TestStepType">
		<sequence>
			<element name="Description" minOccurs="0" type="string">
			</element>
			<element name="TestParameters" minOccurs="0">
				<complexType>
					<sequence>
						<element name="Parameter" type="tm:ParameterType" minOccurs="0" maxOccurs="unbounded" />
					</sequence>
				</complexType>
			</element>
			<element name="BrowserSimulator" type="tm:BrowserSimulatorType" />
			<choice>
				<sequence>
					<element name="OPConfig-1" type="tm:OPConfigType" />
					<element name="OPConfig-2" type="tm:OPConfigType" />
				</sequence>
				<element name="RPConfig" type="tm:RPConfigType" />
			</choice>
		</sequence>
		<attribute name="Name" type="normalizedString" use="required" />
	</complexType>

	<complexType name="BrowserSimulatorType">
		<complexContent>
			<extension base="tm:AbstractConfigType" />
		</complexContent>
	</complexType>

	<complexType name="OPConfigType">
		<complexContent>
			<extension base="tm:AbstractConfigType" />
		</complexContent>
	</complexType>

	<complexType name="RPConfigType">
		<complexContent>
			<extension base="tm:AbstractConfigType" />
		</complexContent>
	</complexType>

	<complexType name="AbstractConfigType" abstract="true">
		<sequence>
			<element name="ImplementationClass" type="normalizedString" />
			<element name="Parameter" type="tm:ParameterType" minOccurs="0" maxOccurs="unbounded" />
		</sequence>
	</complexType>

	<complexType name="ParameterType">
		<simpleContent>
			<extension base="string">
				<attribute name="Key" type="string" use="required" />
			</extension>
		</simpleContent>
	</complexType>


	<!-- REST API -->

	<element name="LearnResult" type="tm:LearnResultType" />
	<complexType name="LearnResultType">
		<sequence>
			<!--<choice>-->
				<!--<element name="TestRPConfig" type="tm:TestRPConfigType" />-->
				<!--<element name="TestOPConfig" type="tm:TestOPConfigType" />-->
			<!--</choice>-->
			<element name="TestConfig" type="tm:TestConfigType" />
			<element name="TestStepResult" type="tm:TestStepResultType" />
		</sequence>
	</complexType>

</schema>
