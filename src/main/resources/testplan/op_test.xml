<?xml version="1.0" encoding="UTF-8"?>
<TestPlan xmlns="http://nds.rub.de/oidc/test-model"
		  Name="OP-Test-Plan">

	<SuiteParameters>
		<Parameter Key="grant_not_needed">false</Parameter>
	</SuiteParameters>

	<LearningStep Name="LearningStep">
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPLearningBrowser</ImplementationClass>
		</BrowserSimulator>
		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
		</RPConfig-2>
	</LearningStep>

	<TestStep Name="Authorization Code Reuse 1">
		<Description>PrOfESSOS attempts to redeem an authorization code that has already been used by another user of the same client</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPCodeReuseBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>
			
			<Parameter Key="force_auth-code_reuse_user">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<!-- not used but required in config-->
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Authorization Code Reuse 2">
		<Description>PrOfESSOS attempts to redeem an authorization code that was issued to and has already been used by a different client - Honest RP</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPCodeReuseBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>
			
			<Parameter Key="force-no-redeem-auth-code">false</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>
			
			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>



	<TestStep Name="Redirect URI Manipulation 1">
		<Description>PrOfESSOS tests the validation of the redirect_uri parameter. To this end, an authentication request 
			containing the redirect_uri value of another client is send to the OP</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
			
			<Parameter Key="authnreq-force-evil-redirect-uri">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Redirect URI Manipulation 2">
		<Description>PrOfESSOS tests the validation of the redirect_uri parameter at the OP. To this end, a random subdomain
		 is prepended to the redirect_uri contained in the authentication request.</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
			
			<Parameter Key="authnreq-random-subdomain-in-redirect-uri">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Redirect URI Manipulation 3">
		<Description>PrOfESSOS tests the validation of the redirect_uri parameter at the OP. To this end, a random path 
			fragment is appended to the redirect_uri contained in the authentication request.</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
			
			<Parameter Key="authnreq-random-path-suffix-in-redirect-uri">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Code Hijack 1">
		<Description>PrOfESSOS issues a token request containing no redirect_uri parameter, even though one was present 
			in the authentication request.
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
			<!---->
			<Parameter Key="tokenreq-exclude-redirect-uri">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<!--not used in this test-->
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
			
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Code Hijack 2">
		<Description>PrOfESSOS issues a token request containing a redirect_uri value that is registered with another 
			client.
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
			
			<Parameter Key="tokenreq-force-evil-redirect-uri">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<!--not used in this test-->
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
			
		</RPConfig-2>
	</TestStep>


	<TestStep Name="Code Hijack 3">
		<Description>PrOfESSOS issues a token request containing a redirect_uri value that does not match the
			one presented in the authentication request and is not registered for the client to which the code
			has been issued. A random path element is appended to the redirect_uri.
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
			
			<Parameter Key="tokenreq-random-path-suffix-in-redirect-uri">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<!--not used in this test-->
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
			
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Code Hijack 4">
		<Description>PrOfESSOS issues a token request containing a redirect_uri value that does not match the
			one presented in the authentication request and is not registered for the client to which the code
			has been issued. A random subdomain is prepended to the redirect_uri;
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
			
			<Parameter Key="tokenreq-random-subdomain-in-redirect-uri">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<!--not used in this test-->
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
			
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Code Hijack 5">
		<Description>PrOfESSOS attempts to redeem an authorization code that was issued to a different client and has 
			not yet been used in a TokenRequest
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPCodeReuseBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>            
			<Parameter Key="force-no-redeem-auth-code">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>
			
			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>


	<TestStep Name="Code Hijack 6">
		<Description>PrOfESSOS attempts to redeem an authorization code using Basic Authentication with a randomly
			generate value as ClientSecret.
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
			<Parameter Key="force_random_client_secret">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>

			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>
	
	<TestStep Name="Code Hijack 7">
		<Description>PrOfESSOS attempts to redeem an authorization code including its client credentials as body 
			parameters in the POST request even though only the (default) authentication method
			"token_endpoint_auth_method": "client_secret_basic" has been registered.
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
			<Parameter Key="tokenreq-force-client-auth-post">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>

			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Code Hijack 8">
		<Description>PrOfESSOS attempts to redeem an authorization code using "token_endpoint_auth_method": "client_secret_post"
			as authentication method but using a random valur for the "client_secret" parameter.
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
			<Parameter Key="enforce-client-registration">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
			<Parameter Key="register-clientauth-method-client_secret_post">true</Parameter>
			<Parameter Key="tokenreq-force-client-auth-post">true</Parameter>
			<Parameter Key="force_random_client_secret">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>

			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>
	
	<TestStep Name="Code Hijack 9">
		<Description>PrOfESSOS attempts to redeem an authorization code using "token_endpoint_auth_method": "client_secret_post" 
			as authentication method but omitting the client_secret parameter.
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
			<Parameter Key="enforce-client-registration">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
			<Parameter Key="register-clientauth-method-client_secret_post">true</Parameter>
			<Parameter Key="tokenreq-clientauth-empty-client-secret">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>

			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>
	
	<!--TODO: this requires detection of sucessful implicit token/id_token to fail the test-->
	<TestStep Name="Downgrade to Implicit">
		<Description>PrOfESSOS registers a Client with 'grant_type=authorization_code' but requests an implicit response 
			in the authentication request by using the parameter 'response_type=token id_token'.
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
			<!-- only needed if the default registration should be change -->
			<!--<Parameter Key="enforce-client-registration">true</Parameter>-->
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
			<Parameter Key="register-grant-type-authorization_code">true</Parameter>
			<Parameter Key="authnreq-response_type-token-id_token">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>

			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>
	
	<!--<TestStep Name="ID Spoofing 1">-->
		<!--<Description><![CDATA[-->
			<!--<h1>ID Spoofing Attack</h1>-->
			<!--In this test we use the Attacker OP and create an ID Token containing the identity (sub) of the victim,-->
			<!--which is controlled by another OP: Honest OP.-->

			<!--<h2>Prerequisites.</h2>-->
			<!--The target Client supports the implicit or the code flow. -->

			<!--<h2>Execution.</h2>-->
			<!--PrOfESSOS issues an invalid ID token containing the victim's identity in the "sub".-->

			<!--<h2>Result Evaluation.</h2>-->
			<!--The attack is successful if the Client accepts and ID Token AND logs the attacker into the victim's account.-->
			<!---->
			<!--<h2>Mitigation</h2>-->
			<!--The identity of an user is represented by the combination of "iss" -->
			<!--and "sub". Thus, both values MUST be used to authenticate the user.-->
		<!--]]>-->
		<!--</Description>-->
		<!--<TestParameters>-->
			<!--<Parameter Key="discovery_support_needed">false</Parameter>-->
			<!--<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>-->
		<!--</TestParameters>-->
		<!--<BrowserSimulator>-->
			<!--<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>-->
			<!--<Parameter Key="use_evil_needle">false</Parameter>-->
		<!--</BrowserSimulator>-->
		<!--<OPConfig-1>-->
			<!--<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>-->
		<!--</OPConfig-1>-->
		<!--<OPConfig-2>-->
			<!--<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>-->

			<!--&lt;!&ndash; gets the "sub" configured in the Honest OP" &ndash;&gt;-->
			<!--<Parameter Key="force_honest_idtoken_iss">false</Parameter>-->
			<!--<Parameter Key="force_honest_idtoken_sub">true</Parameter>-->
			<!--<Parameter Key="force_honest_idtoken_name">false</Parameter>-->
			<!--<Parameter Key="force_honest_idtoken_username">false</Parameter>-->
			<!--<Parameter Key="force_honest_idtoken_email">false</Parameter>-->
		<!--</OPConfig-2>-->
	<!--</TestStep>-->

	<TestStep Name="PKCE 1">
		<Description>PrOfESSOS tests the validation of the PKCE code_verifier. An invalid code_verifier is submitted 
			to the OP in the tpken request.
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
			<!-- only needed if the default registration should be change -->
			<!--<Parameter Key="enforce-client-registration">true</Parameter>-->
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.PkceRP</ImplementationClass>
			<Parameter Key="authnreq-pkce-method-s256">true</Parameter>
			<Parameter Key="tokenreq-invalid-pkce-verifier">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>
			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>

	<TestStep Name="PKCE 2">
		<Description>PrOfESSOS tests the validation of the PKCE code_verifier. No code_challenge_method parameter is 
			included in the Authentication Request, which should indicate the default method "S256". For the Token 
			Request, PrOfESSOS submits the original code_challenge value as if using "plain". In addition, an 
			(invalid) parameter code_challenge_method=plain is added to the Token Request.
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.PkceRP</ImplementationClass>
			<Parameter Key="authnreq-pkce-exclude-method-param">true</Parameter>
			<Parameter Key="tokenreq-add-pkce-method-param-plain">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.PkceRP</ImplementationClass>
			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>
	
</TestPlan>
