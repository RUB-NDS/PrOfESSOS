<?xml version="1.0" encoding="UTF-8"?>
<TestPlan xmlns="http://nds.rub.de/oidc/test-model"
		  Name="OP-Test-Plan">

	<SuiteParameters>
		<Parameter Key="grant_not_needed">false</Parameter>
	</SuiteParameters>

	<LearningStep Name="LearningStep">
		<TestParameters>
			<Parameter Key="rp.is_learning_teststep">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPLearningBrowser</ImplementationClass>
		</BrowserSimulator>
		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
		</RPConfig-2>
	</LearningStep>

	<TestStep Name="Authorization Code Reuse 1">
		<Description>
			<![CDATA[
			PrOfESSOS attempts to redeem an Authorization Code that has already been used by the same client.
			]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPCodeReuseBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>
			<Parameter Key="force_auth-code_reuse_user">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<!-- not used but required in config-->
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Authorization Code Reuse 2">
		<Description>
			<![CDATA[
			PrOfESSOS attempts to redeem an Authorization Code that was issued to and has already been used by a
			different client - Honest RP.
			]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPCodeReuseBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>
			<Parameter Key="force-no-redeem-auth-code">false</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Redirect URI Manipulation 1">
		<Description>
			<![CDATA[
			PrOfESSOS tests the validation of the <code>redirect_uri</code> parameter. To this end, an Authentication Request
			containing the <code>redirect_uri</code> value of another client is send to the OP
			]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>

			<Parameter Key="authnreq-force-evil-redirect-uri">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Redirect URI Manipulation 2">
		<Description>
		<![CDATA[
			PrOfESSOS tests the validation of the <code>redirect_uri</code> parameter at the OP. To this end, a random subdomain
		 is prepended to the <code>redirect_uri</code> contained in the Authentication Request.</Description>
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>

			<Parameter Key="authnreq-random-subdomain-in-redirect-uri">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Redirect URI Manipulation 3">
		<Description><![CDATA[
		PrOfESSOS tests the validation of the <code>redirect_uri</code> parameter at the OP. To this end, a random path
			fragment is appended to the <code>redirect_uri</code> contained in the Authentication Request.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>

			<Parameter Key="authnreq-random-path-suffix-in-redirect-uri">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Redirect URI Manipulation 4">
		<Description><![CDATA[
		PrOfESSOS tests the validation of the <code>redirect_uri</code> parameter at the OP. In this test,
		 the benign <code>redirect_uri</code> is embedded into the <code>userinfo</code> part of the
		 Authentication Request URL, while the URL's actual authority section points to an attacker controlled
		 endpoint. As an example, such an URL might look like the URL shown below:
		 <pre><code>http://http://honest-rp.com:pass@attacker.com</code></pre>
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>

			<Parameter Key="authnreq-honesturl-in-userpart-of-redirect-uri">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Redirect URI Manipulation 5">
		<Description><![CDATA[
		PrOfESSOS tests the validation of the <code>redirect_uri</code> parameter at the OP. In this test,
		 the benign <code>redirect_uri</code> is URL encoded and embedded into the <code>userinfo</code> part of the
		 Authentication Request URL, while the URL's actual authority section points to an attacker controlled
		 endpoint. As an example, such an URL might look like the URL shown below:
		 <pre><code>http://http%3A%2F%2Fhonest-rp.com:pass@attacker.com</code></pre>
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
			<Parameter Key="authnreq-honesturl-in-userpart-of-redirect-uri">true</Parameter>
			<Parameter Key="authnreq-userinfo-url-encode">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Redirect URI Manipulation 6">
		<Description><![CDATA[
		PrOfESSOS tests the validation of the <code>redirect_uri</code> parameter at the OP. In this test,
		 the URI scheme (e.g., <code>https://</code>) is stripped from the benign <code>redirect_uri</code> before
		 it is embedded into the <code>userinfo</code> part of the
		 Authentication Request URL. The Authentication Request URL's actual authority section points to an attacker
		 controlled endpoint. As an example, such an URL might look like the URL shown below:
		 <pre><code>http://honest-rp.com:pass@attacker.com</code></pre>
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
			<Parameter Key="authnreq-honesturl-in-userpart-of-redirect-uri">true</Parameter>
			<Parameter Key="authnreq-userinfo-scheme-excluded">true</Parameter>

		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Redirect URI Manipulation 7">
		<Description><![CDATA[
		PrOfESSOS tests the validation of the <code>redirect_uri</code> parameter at the OP. In this test,
		 the URI scheme (e.g., <code>https://</code>) is stripped from the benign <code>redirect_uri</code> before
		 it is URL encoded and embedded into the <code>userinfo</code> part of the
		 Authentication Request URL. The Authentication Request URL's actual authority section points to an attacker
		 controlled endpoint. As an example, such an URL might look like the URL shown below:
		 <pre><code>http://honest-rp.com%3A8080:pass@attacker.com</code></pre>
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
			<Parameter Key="authnreq-honesturl-in-userpart-of-redirect-uri">true</Parameter>
			<Parameter Key="authnreq-userinfo-scheme-excluded">true</Parameter>
			<Parameter Key="authnreq-userinfo-url-encoded">true</Parameter>

		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Redirect URI Manipulation 8">
		<Description><![CDATA[
		PrOfESSOS tests the validation of the <code>redirect_uri</code> parameter at the OP, probing for a <em>HTTP
		Parameter Pollution</em> weakness. The Authentication Request contains two <code>redirect_uri</code>
		parameters, the first one pointing towards the correct Redirect URI of the benign RP while the second
		<code>redirect_uri</code> parameter points to an attacker controlled endpoint. If different URL parsing
		mechanisms are employed during processing of the Authentication Request, the validation logic might choose and
		successfully validate the benign Redirecet URI while the actual response generating logic makes use of the
		malicious endpoint.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
			<Parameter Key="authnreq-redirect_uri-parameter-pollution-honest-first">true</Parameter>

		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Redirect URI Manipulation 9">
		<Description><![CDATA[
		PrOfESSOS tests the validation of the <code>redirect_uri</code> parameter at the OP, probing for a <em>HTTP
		Parameter Pollution</em> weakness. The Authentication Request contains two <code>redirect_uri</code>
		parameters, the first one pointing towards an attacker controlled endpoint while the second
		<code>redirect_uri</code> parameter points to the correct Redirect URI of the benign RP. If different URL parsing
		mechanisms are employed during processing of the Authentication Request, the validation logic might choose and
		successfully validate the benign Redirecet URI while the actual response generating logic makes use of the
		malicious endpoint.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
			<Parameter Key="authnreq-redirect_uri-parameter-pollution-evil-first">true</Parameter>

		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
		</RPConfig-2>
	</TestStep>



	<TestStep Name="Code Hijack 1">
		<Description><![CDATA[
		PrOfESSOS issues a Token Request containing no <code>redirect_uri</code> parameter, even though one was present
			in the Authentication Request.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>
			<!---->
			<Parameter Key="tokenreq-exclude-redirect-uri">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<!--not used in this test-->
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>

		</RPConfig-2>
	</TestStep>

	<TestStep Name="Code Hijack 2">
		<Description><![CDATA[
		PrOfESSOS issues a token request containing a redirect_uri value that is registered with another
			client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>

			<Parameter Key="tokenreq-force-evil-redirect-uri">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<!--not used in this test-->
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>

		</RPConfig-2>
	</TestStep>


	<TestStep Name="Code Hijack 3">
		<Description><![CDATA[
		PrOfESSOS issues a Token Request containing a <code>redirect_uri</code> value that does not match the
			one presented in the Authentication Request and is not registered for the client to which the code
			has been issued. A random path element is appended to the <code>redirect_uri</code>.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>

			<Parameter Key="tokenreq-random-path-suffix-in-redirect-uri">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<!--not used in this test-->
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>

		</RPConfig-2>
	</TestStep>

	<TestStep Name="Code Hijack 4">
		<Description><![CDATA[
		PrOfESSOS issues a token request containing a <code>redirect_uri</code> value that does not match the
			one presented in the Authentication Request and is not registered for the client to which the code
			has been issued. A random subdomain is prepended to the <code>redirect_uri</code>.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>

			<Parameter Key="tokenreq-random-subdomain-in-redirect-uri">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<!--not used in this test-->
			<ImplementationClass>de.rub.nds.oidc.server.rp.RumRP</ImplementationClass>

		</RPConfig-2>
	</TestStep>

	<TestStep Name="Code Hijack 5">
		<Description><![CDATA[
		PrOfESSOS attempts to redeem an Authorization Code that was issued to a different client and has
			not yet been used in a Token Request
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPCodeReuseBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>
			<Parameter Key="force-no-redeem-auth-code">true</Parameter>

		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-2>
	</TestStep>


	<TestStep Name="Code Hijack 6">
		<Description><![CDATA[
		PrOfESSOS attempts to redeem an authorization code using Basic Authentication with a randomly
			generated value as <code>client_secret</code>.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
			<Parameter Key="force_random_client_secret">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>

			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Code Hijack 7">
		<Description><![CDATA[
		PrOfESSOS attempts to redeem an authorization code using Basic Authentication with an empty string as
			<code>client_secret</code>. That is, the Authorization Header's value is made up as
			<code>Base64("client_id:")</code>
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
			<Parameter Key="tokenreq-clientauth-empty-client-id">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>

			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Code Hijack 8">
		<Description><![CDATA[
		PrOfESSOS attempts to redeem an authorization code including its client credentials as body
			parameters in the POST request even though only the (default) authentication method
			<code>"token_endpoint_auth_method": "client_secret_basic"</code> has been registered.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
			<Parameter Key="tokenreq-force-client-auth-post">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>

			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Code Hijack 9">
		<Description><![CDATA[
			PrOfESSOS attempts to redeem an authorization code using <code>"token_endpoint_auth_method": "client_secret_post"</code>
			as authentication method with a random value for the <code>client_secret</code> parameter.
		]]></Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
			<Parameter Key="enforce-client-registration">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
			<Parameter Key="register-clientauth-method-client_secret_post">true</Parameter>
			<Parameter Key="tokenreq-force-client-auth-post">true</Parameter>
			<Parameter Key="force_random_client_secret">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>

			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Code Hijack 10">
		<Description><![CDATA[
		PrOfESSOS attempts to redeem an authorization code using <code>client_secret_post</code> authentication method in
		the Token Request without including the <code>client_secret</code> parameter.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
			<Parameter Key="enforce-client-registration">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
			<Parameter Key="register-clientauth-method-client_secret_post">true</Parameter>
			<Parameter Key="tokenreq-clientauth-empty-client-secret">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>

			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>

	<TestStep Name="Message Flow Confusion - Response Type">
		<Description><![CDATA[
		PrOfESSOS registers a Client with <code>grant_type=authorization_code</code>. In the Authentication Request, an
		Implicit Flow is requested by using the parameter <code>response_type=token id_token</code>.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
			<!-- only needed if the default registration should be change -->
			<!--<Parameter Key="enforce-client-registration">true</Parameter>-->
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
			<!--<Parameter Key="register-grant-type-authorization_code">true</Parameter>-->
			<Parameter Key="authnreq-response_type-id_token">true</Parameter>
			<Parameter Key="authnreq-response_type-token">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>

			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>


	<TestStep Name="Message Flow Confusion - Response Mode">
		<Description><![CDATA[
		 PrOfESSOS requests an <code>id_token</code> using the Implicit Flow and sets the <code>response_mode</code>
		 parameter to <code>query</code>. As per <em>OAuth 2.0 Multiple Response Type Encoding Practices</em>, the OP must
		 not include tokens in the URL query parameters.
			]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
			<!-- only needed if the default registration should be change -->
			<Parameter Key="enforce-client-registration">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>
			<Parameter Key="register-grant-type-implicit">true</Parameter>
			<Parameter Key="register-response-type-token-id_token">true</Parameter>
			<Parameter Key="authnreq-response_type-id_token">true</Parameter>
			<Parameter Key="authnreq-response_type-token">true</Parameter>
			<Parameter Key="authnreq-response_mode-query">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>

			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>


	<TestStep Name="PKCE 1 - TR: Invalid Verifier">
		<Description><![CDATA[
		PrOfESSOS tests the validation of the PKCE <code>code_verifier</code>. An invalid <code>code_verifier</code> is submitted
			to the OP in the Token Request.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
			<!-- only needed if the default registration should be change -->
			<!--<Parameter Key="enforce-client-registration">true</Parameter>-->
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.PkceRP</ImplementationClass>
			<Parameter Key="authnreq-pkce-method-s256">true</Parameter>
			<Parameter Key="tokenreq-invalid-pkce-verifier">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>
			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>

	<TestStep Name="PKCE 2 - TR: Exclude Verifier">
		<Description><![CDATA[
		 PrOfESSOS tests the validation of the PKCE <code>code_verifier</code>. A <code>code_challenge</code> is included in the
			Authentication Request but the following Token Request does not include a <code>code_verifier</code>.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
			<!-- only needed if the default registration should be change -->
			<!--<Parameter Key="enforce-client-registration">true</Parameter>-->
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.PkceRP</ImplementationClass>
			<Parameter Key="authnreq-pkce-method-s256">true</Parameter>
			<Parameter Key="tokenreq-pkce-verifier-excluded">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>
			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>

	<TestStep Name="PKCE 3 - AR: Exclude Challenge">
		<Description><![CDATA[
			PrOfESSOS tests the validation of the PKCE <code>code_verifier</code>. A <code>code_verifier</code> is included in the
			Token Request even though the Authentication Request did not include a <code>code_challenge</code>.
			]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
			<!-- only needed if the default registration should be change -->
			<!--<Parameter Key="enforce-client-registration">true</Parameter>-->
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.PkceRP</ImplementationClass>
			<Parameter Key="authnreq-pkce-method-s256">true</Parameter>
			<Parameter Key="authnreq-pkce-exclude-challenge-param">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.CodeReuseRP</ImplementationClass>
			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>

	<TestStep Name="PKCE 4 - Downgrade to Plain">
		<Description>
			<![CDATA[
			PrOfESSOS tests the validation of the PKCE <code>code_verifier</code>. No <code>code_challenge_method</code> parameter is
			included in the Authentication Request, indicating that the default method 'S256' is to be used. In the
			following Token Request, PrOfESSOS submits the original value of the <code>code_challenge</code> as <code>code_verifier</code>,
			as if using <code>code_challenge_method=plain</code>. In addition, an (invalid) parameter <code>code_challenge_method=plain</code>
			is added to the Token Request.
			]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.PkceRP</ImplementationClass>
			<Parameter Key="authnreq-pkce-exclude-method-param">true</Parameter>
			<Parameter Key="tokenreq-add-pkce-method-param-plain">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.PkceRP</ImplementationClass>
			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>

	<TestStep Name="PKCE 5 - Verifier Confusion">
		<Description><![CDATA[
			PrOfESSOS tests if the PKCE <code>code_verifier</code> is bound to the Authorization Code. Here,
			PrOfESSOS submits an unused <code>code_verifier</code> that was issued for a different Authorization Code.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="is_single_rp_test">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.op.OPCodeReuseBrowser</ImplementationClass>
		</BrowserSimulator>

		<RPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.rp.PkceRP</ImplementationClass>
			<Parameter Key="force-no-redeem-auth-code">true</Parameter>
			<Parameter Key="tokenreq-pkce-from-other-session">true</Parameter>
			<Parameter Key="authnreq-pkce-method-s256">true</Parameter>
			<Parameter Key="code-redemption-fails-test">true</Parameter>
		</RPConfig-1>
		<RPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.rp.PkceRP</ImplementationClass>
			<!--<Parameter Key="force-use-stored-auth-code">true</Parameter>-->
		</RPConfig-2>
	</TestStep>

	<!--<TestStep Name="PKCE 4 positive test using DefaultRP ">-->
		<!--<Description>PKCE positive test-->
		<!--</Description>-->
		<!--<TestParameters>-->
			<!--<Parameter Key="is_single_rp_test">true</Parameter>-->
		<!--</TestParameters>-->
		<!--<BrowserSimulator>-->
			<!--<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>-->
		<!--</BrowserSimulator>-->

		<!--<RPConfig-1>-->
			<!--<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>-->
			<!--&lt;!&ndash;<ImplementationClass>de.rub.nds.oidc.server.rp.PkceRP</ImplementationClass>&ndash;&gt;-->
			<!--&lt;!&ndash;<Parameter Key="force-no-redeem-auth-code">true</Parameter>&ndash;&gt;-->
			<!--&lt;!&ndash;<Parameter Key="tokenreq-pkce-from-other-session">true</Parameter>&ndash;&gt;-->
			<!--<Parameter Key="authnreq-pkce-method-s256">true</Parameter>-->
		<!--</RPConfig-1>-->
		<!--<RPConfig-2>-->
			<!--<ImplementationClass>de.rub.nds.oidc.server.rp.PkceRP</ImplementationClass>-->
			<!--&lt;!&ndash;<Parameter Key="force-use-stored-auth-code">true</Parameter>&ndash;&gt;-->
		<!--</RPConfig-2>-->
	<!--</TestStep>-->

	<!--<TestStep Name="PKCE positive test using PkceRP">-->
		<!--<Description>PKCE positive test-->
		<!--</Description>-->
		<!--<TestParameters>-->
			<!--<Parameter Key="is_single_rp_test">true</Parameter>-->
		<!--</TestParameters>-->
		<!--<BrowserSimulator>-->
			<!--<ImplementationClass>de.rub.nds.oidc.browser.op.OPRumBrowser</ImplementationClass>-->
		<!--</BrowserSimulator>-->

		<!--<RPConfig-1>-->
			<!--&lt;!&ndash;<ImplementationClass>de.rub.nds.oidc.server.rp.DefaultRP</ImplementationClass>&ndash;&gt;-->
			<!--<ImplementationClass>de.rub.nds.oidc.server.rp.PkceRP</ImplementationClass>-->
			<!--&lt;!&ndash;<Parameter Key="force-no-redeem-auth-code">true</Parameter>&ndash;&gt;-->
			<!--&lt;!&ndash;<Parameter Key="tokenreq-pkce-from-other-session">true</Parameter>&ndash;&gt;-->
			<!--<Parameter Key="authnreq-pkce-method-s256">true</Parameter>-->
		<!--</RPConfig-1>-->
		<!--<RPConfig-2>-->
			<!--<ImplementationClass>de.rub.nds.oidc.server.rp.PkceRP</ImplementationClass>-->
			<!--&lt;!&ndash;<Parameter Key="force-use-stored-auth-code">true</Parameter>&ndash;&gt;-->
		<!--</RPConfig-2>-->
	<!--</TestStep>-->


</TestPlan>
