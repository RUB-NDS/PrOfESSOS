<?xml version="1.0" encoding="UTF-8"?>
<TestPlan xmlns="http://nds.rub.de/oidc/test-model"
		  Name="RP-Test-Plan">

	<SuiteParameters>
		<Parameter Key="grant_not_needed">false</Parameter>
	</SuiteParameters>

	<LearningStep Name="LearningStep">
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.RPLearningBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-2>
	</LearningStep>

	<TestStep Name="ID Spoofing 1">
		<Description><![CDATA[
			<h1>ID Spoofing Attack</h1>
			In this test we use the Attacker OP and create an ID Token containing the identity (sub) of the victim,
			which is controlled by another OP: Honest OP.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow. 

			<h2>Execution.</h2>
			PrOfESSOS issues an invalid ID token containing the victim's identity in the "sub".

			<h2>Result Evaluation.</h2>
			The attack is successful if the Client accepts and ID Token AND logs the attacker into the victim's account.
			
			<h2>Mitigation</h2>
			The identity of an user is represented by the combination of "iss" 
			and "sub". Thus, both values MUST be used to authenticate the user.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">false</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>

			<!-- gets the "sub" configured in the Honest OP" -->
			<Parameter Key="force_honest_idtoken_iss">false</Parameter>
			<Parameter Key="force_honest_idtoken_sub">true</Parameter>
			<Parameter Key="force_honest_idtoken_name">false</Parameter>
			<Parameter Key="force_honest_idtoken_username">false</Parameter>
			<Parameter Key="force_honest_idtoken_email">false</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="ID Spoofing 2">
		<Description><![CDATA[
			<h1>ID Spoofing Attack</h1>
			In this test we use the Attacker OP and create an ID Token containing the identity (iss+sub) of the victim,
			which is controlled by another OP: Honest OP.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.

			<h2>Execution.</h2>
			PrOfESSOS issues an invalid ID token containing the victim's identity in the "sub" and the Honest OP as "iss".

			<h2>Result Evaluation.</h2>
			The attack is successful if the Client accepts and ID Token AND logs the attacker into the victim's account.
			
			<h2>Mitigation</h2>
			Step 2 in Section 3.1.3.7. 
			OpenIDConnect-Core: " The Issuer Identifier for the OpenID Provider 
			(which is typically obtained during Discovery) MUST exactly match 
			the value of the iss (issuer) Claim." within the ID Token.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">false</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>

			<!-- gets the "iss" and "sub" configured in the Honest OP" -->
			<Parameter Key="force_honest_idtoken_iss">true</Parameter>
			<Parameter Key="force_honest_idtoken_sub">true</Parameter>
			<Parameter Key="force_honest_idtoken_name">false</Parameter>
			<Parameter Key="force_honest_idtoken_username">false</Parameter>
			<Parameter Key="force_honest_idtoken_email">false</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="ID Spoofing 3">
		<Description><![CDATA[
			<h1>ID Spoofing Attack</h1>
			In this test we use the Attacker OP and create an ID Token containing the identity (name+username+email) of
			the victim, which is controlled by another OP: Honest OP.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.

			<h2>Execution.</h2>
			PrOfESSOS issues valid ID token containing victim's identity as subclaims (name, username and email).

			<h2>Result Evaluation.</h2>
			The attack is successful if the Client accepts and ID Token AND logs the attacker into the victim's account.
			
			<h2>Mitigation</h2>
			The identity of an user is represented by the combination of "iss" 
			and "sub". Thus, subclaims can be used only to retrieve 
			further information regarding the user, but NOT for 
			authentication. Currently, OpenID Connect does not provide 
			any mechanisms to verify these statements.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">false</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
			<!-- gets the "name", "username" and "email" configured in the Honest OP" -->
			<Parameter Key="force_honest_idtoken_iss">false</Parameter>
			<Parameter Key="force_honest_idtoken_sub">false</Parameter>
			<Parameter Key="force_honest_idtoken_name">true</Parameter>
			<Parameter Key="force_honest_idtoken_username">true</Parameter>
			<Parameter Key="force_honest_idtoken_email">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Issuer Confusion">
		<Description><![CDATA[
			<h1>Issuer Confusion</h1>
			In this test we use the Attacker OP to return maliciously crafted Discovery document (containing the issuer of the Honest OP) and afterwards to create an ID Token containing the identity (iss+sub) of the victim, which is controlled by another OP: Honest OP.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.

			<h2>Execution.</h2>
				Step 1: PrOfESSOS returns invalid "issuer" parameter during Discovery. The "iss" is set to the value of the Honest OP.
				Step 2: PrOfESSOS issues an invalid ID token containing the victim's identity in the "sub" and the Honest OP as "iss". 

			<h2>Result Evaluation.</h2>
			The attack is successful if the Client accepts and ID Token AND logs the attacker into the victim's account.
			
			<h2>Mitigation</h2>
			Step 1 in Section 3. 
			OpenIDConnect-Discovery: "If Issuer discovery is supported (see 
			Section 2), this value MUST be identical to the issuer value returned by WebFinger. This also MUST be identical to the iss Claim value in ID Tokens issued from this Issuer."
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">true</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.IssuerConfusionRPBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">false</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
			<Parameter Key="force_honest_discovery_iss">true</Parameter>
			<Parameter Key="force_honest_idtoken_iss">true</Parameter>
			<Parameter Key="force_honest_idtoken_sub">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 1 - jwk Spoofing">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing valid signature signed with an untrusted key.
			The key is included in the ID Token as "jwk" member and referenced by the "kid" parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the ID token is accepted by the Client.

			<h2>Mitigation</h2>
			As per OpenID Connect Core 1.0, Section 2, "ID Tokens SHOULD NOT use the JWS or JWE x5u, x5c,
			jku, or jwk Header Parameter fields. Instead, references to keys used are communicated in
			advance using Discovery and Registration parameters"
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="idtoken_spoofed_jwk">true</Parameter>
			<Parameter Key="include_fresh_keyid_in_jwt_and_jwk">true</Parameter>
			<!--<Parameter Key="idtoken_crit_jwk">true</Parameter>-->
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 1.1 - JWK Spoofing (jwk: URI)">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing valid signature signed with an untrusted key.
			The ID Token's "jwk" member is (invalidly) set to a JWKS URI that returns the signing key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the ID token is accepted by the Client.

			<h2>Mitigation</h2>
			As per OpenID Connect Core 1.0, Section 2, "ID Tokens SHOULD NOT use the JWS or JWE x5u, x5c,
			jku, or jwk Header Parameter fields. Instead, references to keys used are communicated in
			advance using Discovery and Registration parameters"
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="idtoken_spoofed_jku_as_jwk">true</Parameter>
			<!--<Parameter Key="idtoken_crit_jwk">true</Parameter>-->
			<Parameter Key="request_to_untrusted_key_uri_fails_test">true</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 2 - jku Spoofing">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing valid signature signed with an untrusted key.
			The key is referenced by the "jku" parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the ID token is accepted by the Client.

			<h2>Mitigation</h2>
			As per OpenID Connect Core 1.0, Section 2, "ID Tokens SHOULD NOT use the JWS or JWE x5u, x5c,
			jku, or jwk Header Parameter fields. Instead, references to keys used are communicated in
			advance using Discovery and Registration parameters"
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="idtoken_spoofed_jku">true</Parameter>
			<Parameter Key="include_fresh_keyid_in_jwt_and_jwk">true</Parameter>
			<!--<Parameter Key="idtoken_crit_jku">true</Parameter>-->
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 2.1 - jku returns [untrusted, trusted]">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing valid signature signed with an untrusted key.
			The key is referenced by the "jku" parameter.
			The resource referenced in the jku member returns a JWKS which contains the signing key as the
			first member and the (trusted) key from OP's JWKS endpoint as the second member.

			<h2>Result Evaluation.</h2>
			The attack is successful if the ID token is accepted by the Client.

			<h2>Mitigation</h2>
			As per OpenID Connect Core 1.0, Section 2, "ID Tokens SHOULD NOT use the JWS or JWE x5u, x5c,
			jku, or jwk Header Parameter fields. Instead, references to keys used are communicated in
			advance using Discovery and Registration parameters"
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="idtoken_spoofed_jku">true</Parameter>
			<Parameter Key="include_fresh_keyid_in_jwt_and_jwk">true</Parameter>
			<Parameter Key="jku_return_untrusted-trusted_jwks">true</Parameter>
			<Parameter Key="idtoken_crit_jku">true</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 2.2 - jku returns [trusted, untrusted]">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing valid signature signed with an untrusted key.
			The key is referenced by the "jku" parameter.
			The resource referenced in the jku member returns a JWKS which contains the signing key as the
			second member and the (trusted) key from OP's JWKS endpoint as the first member.

			<h2>Result Evaluation.</h2>
			The attack is successful if the ID token is accepted by the Client.

			<h2>Mitigation</h2>
			As per OpenID Connect Core 1.0, Section 2, "ID Tokens SHOULD NOT use the JWS or JWE x5u, x5c,
			jku, or jwk Header Parameter fields. Instead, references to keys used are communicated in
			advance using Discovery and Registration parameters"
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="idtoken_spoofed_jku">true</Parameter>
			<Parameter Key="include_fresh_keyid_in_jwt_and_jwk">true</Parameter>
			<Parameter Key="jku_return_trusted-untrusted_jwks">true</Parameter>
			<!--<Parameter Key="idtoken_crit_jku">true</Parameter>-->
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 2.3 - jwk contains spoofed jku">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing valid signature signed with an untrusted key.
			The signing key is included in the jwk parameter. To lure the client into trustin the key,
			the JWK's "jku" parameter points to an URL that responds with the signing key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the ID token is accepted by the Client or if the jku URI is contacted.

			<h2>Mitigation</h2>
			As per OpenID Connect Core 1.0, Section 2, "ID Tokens SHOULD NOT use the JWS or JWE x5u, x5c,
			jku, or jwk Header Parameter fields. Instead, references to keys used are communicated in
			advance using Discovery and Registration parameters"
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="idtoken_spoofed_jku_in_jwk">true</Parameter>
			<Parameter Key="include_fresh_keyid_in_jwt_and_jwk">true</Parameter>
			<Parameter Key="idtoken_crit_jwk">true</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
			<Parameter Key="request_to_untrusted_key_uri_fails_test">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 3 - x5u Spoofing">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing valid signature signed with an untrusted key.
			The key is referenced by the "x5u" parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the ID token is accepted by the Client.

			<h2>Mitigation</h2>
			As per OpenID Connect Core 1.0, Section 2, "ID Tokens SHOULD NOT use the JWS or JWE x5u, x5c,
			jku, or jwk Header Parameter fields. Instead, references to keys used are communicated in
			advance using Discovery and Registration parameters"
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="idtoken_spoofed_x5u">true</Parameter>
			<Parameter Key="include_fresh_keyid_in_jwt_and_jwk">true</Parameter>
			<!--<Parameter Key="idtoken_crit_jwk">true</Parameter>-->
			<Parameter Key="idtoken_crit_x5u">true</Parameter>
			<!--<Parameter Key="idtoken_spoofed_jku">true</Parameter>-->
			<Parameter Key="force_success_url_fails">true</Parameter>
			<Parameter Key="request_to_untrusted_key_uri_fails_test">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 4 - x5c Spoofing">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token containing valid signature signed with untrusted key.
			The key is included in the ID Token as the "x5c" member.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="idtoken_spoofed_x5c">true</Parameter>
			<Parameter Key="include_fresh_keyid_in_jwt_and_jwk">true</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
			<Parameter Key="request_to_untrusted_key_uri_fails_test">true</Parameter>

		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 4.1 - x5c: [trusted, untrusted]">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token containing valid signature signed with untrusted key.
			The signing key is included in the second position of the "x5c" parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="idtoken_spoofed_x5c">true</Parameter>
			<Parameter Key="idtoken_x5c_trusted-untrusted">true</Parameter>
			<Parameter Key="include_fresh_keyid_in_jwt_and_jwk">true</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
			<!--<Parameter Key="request_to_untrusted_key_uri_fails_test">true</Parameter>-->

		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 4.2 - x5c: [untrusted, trusted]">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token containing valid signature signed with untrusted key.
			The signing key is included in the first position of the "x5c" parameter, whereas the OP's (trusted)
			key is in the first position of the "x5c" list.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="idtoken_spoofed_x5c">true</Parameter>
			<Parameter Key="idtoken_x5c_untrusted-trusted">true</Parameter>
			<Parameter Key="include_fresh_keyid_in_jwt_and_jwk">true</Parameter>
			<!--<Parameter Key="idtoken_crit_x5c">true</Parameter>-->
			<Parameter Key="force_success_url_fails">true</Parameter>

		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 5 - kid Spoofing (kid: URI)">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token containing valid signature signed with an untrusted key.
			The signing key is hinted at in the ID Token by the "kid" parameter. However, in this test, the value
			of the "kid" is an (untrusted) URI that responds with the signing key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="force_spoofed_jku_as_kid">true</Parameter>
			<Parameter Key="idtoken_crit_kid">true</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
			<Parameter Key="request_to_untrusted_key_uri_fails_test">true</Parameter>

		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 5.1 - kid Spoofing (kid: jwk)">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token containing valid signature created with an untrusted key.
			The signing key is hinted at in the ID Token by the "kid" parameter. However, in this test, the (invalid)
			value of the "kid" is the JWK representation of the signing key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="force_spoofed_jwk_as_kid">true</Parameter>
			<Parameter Key="idtoken_crit_kid">true</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>

		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 6 - Session Overwriting">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			The Client has the same "client_id" on the Honest and Malicious OP.

			<h2>Execution.</h2>
			Session Overwriting attack in order to confuse the client to use the wrong key.

			Test desciption
			<ul>
				<li>Step 1: starts authentication with Malicious OP</li>
				<li>Step 2: pause before sending the Authentication Response (code or idtoken/access token) to the SP</li>
				<li>Step 3: start authentication with Honest OP within the same HTTP session as Step 1 (i.e., use the same Cookies)</li>
				<li>Step 4: abort Step 3 after the Honest IdP has been contacted by the Browser from Step 3.</li>
				<li>Step 5: continue with Step 2 (break the pause) and sends the Authentication Response (code or idtoken/access token)</li>
			</ul>
			
			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">true</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.KC6OPBrowser</ImplementationClass>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="force_register_honest_client_id">true</Parameter>
			<Parameter Key="force_idtoken_header_alg_hmac">true</Parameter>
			<Parameter Key="force_honest_idtoken_iss">true</Parameter>
			<Parameter Key="force_honest_idtoken_sub">true</Parameter>
			<Parameter Key="include_signing_certificate">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 7.1 - MAC from PKCS1 RSA Key 1">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using the PEM string of
			the PKCS1 encoded RSA public key as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pkcs1_pubkey">true</Parameter>
			<Parameter Key="pkcs1_keyconfusion_payload_type">ORIGINAL</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 7.2 - MAC from PKCS1 RSA Key 2">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using the stripped PEM string of
			the PKCS1 encoded RSA public key as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pkcs1_pubkey">true</Parameter>
			<Parameter Key="pkcs1_keyconfusion_payload_type">ORIGINAL_NO_HEADER_FOOTER</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 7.3 - MAC from PKCS1 RSA Key 3">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using the linefeed free PEM string of
			the PKCS1 encoded RSA public key as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pkcs1_pubkey">true</Parameter>
			<Parameter Key="pkcs1_keyconfusion_payload_type">ORIGINAL_NO_LF</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 7.4 - MAC from PKCS1 RSA Key 4">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using a variation of the PEM string of
			the PKCS1 encoded RSA public key as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pkcs1_pubkey">true</Parameter>
			<Parameter Key="pkcs1_keyconfusion_payload_type">ORIGINAL_NO_HEADER_FOOTER_LF</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 7.5 - MAC from PKCS1 RSA Key 5">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using a variation of the PEM string of
			the PKCS1 encoded RSA public key as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pkcs1_pubkey">true</Parameter>
			<Parameter Key="pkcs1_keyconfusion_payload_type">ORIGINAL_ADDITIONAL_LF</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 7.6 - MAC from PKCS1 RSA Key 6">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using the Base64 encoded ASN.1 RSA
			Public Key as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pkcs1_pubkey">true</Parameter>
			<Parameter Key="pkcs1_keyconfusion_payload_type">PKCS1</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 7.7 - MAC from PKCS1 RSA Key 7">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using the stripped Base64 encoded ASN.1 RSA
			Public Key as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pkcs1_pubkey">true</Parameter>
			<Parameter Key="pkcs1_keyconfusion_payload_type">PKCS1_NO_HEADER_FOOTER</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 7.8 - MAC from PKCS1 RSA Key 8">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using the linefeed free
			Base64 encoded ASN.1 RSA Public Key as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pkcs1_pubkey">true</Parameter>
			<Parameter Key="pkcs1_keyconfusion_payload_type">PKCS1_NO_LF</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 7.9 - MAC from PKCS1 RSA Key 9">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using a variation of the
			Base64 encoded ASN.1 RSA Public Key as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pkcs1_pubkey">true</Parameter>
			<Parameter Key="pkcs1_keyconfusion_payload_type">PKCS1_NO_HEADER_FOOTER_LF</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 7.10 - MAC from PKCS8 RSA Key 1">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using the
			PKCS8 formatted RSA public Key as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pkcs8_pubkey">true</Parameter>
			<Parameter Key="pkcs8_keyconfusion_payload_type">PKCS8</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 7.11 - MAC from PKCS8 RSA Key 2">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using the
			PKCS8 formatted RSA public Key as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pkcs8_pubkey">true</Parameter>
			<Parameter Key="pkcs8_keyconfusion_payload_type">PKCS8_WITH_HEADER_FOOTER</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 7.12 - MAC from PKCS8 RSA Key 3">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using a variation of the 
			PKCS8 formatted RSA public Key as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pkcs8_pubkey">true</Parameter>
			<Parameter Key="pkcs8_keyconfusion_payload_type">PKCS8_WITH_LF</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 7.13 - MAC from PKCS8 RSA Key 4">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using a variation of the 
			PKCS8 formatted RSA public Key as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pkcs8_pubkey">true</Parameter>
			<Parameter Key="pkcs8_keyconfusion_payload_type">PKCS8_WITH_HEADER_FOOTER_LF</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 7.14 - MAC from PKCS8 RSA Key 5">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using a variation of the 
			PKCS8 formatted RSA public Key as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pkcs8_pubkey">true</Parameter>
			<Parameter Key="pkcs8_keyconfusion_payload_type">PKCS8_WITH_HEADER_FOOTER_LF_ENDING_LF</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 8 - Spoofed MAC Key">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using a key that is 
			contained encoded octet string in the token's JWK member.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">true</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="idtoken_spoofed_secret_key_in_jwk">true</Parameter>
			<Parameter Key="idtoken_crit_jwk">true</Parameter>
			<Parameter Key="include_fresh_keyid_in_jwt_and_jwk">true</Parameter>
			<Parameter Key="force_success_url_fails">true</Parameter>
			<Parameter Key="op_configuration_include_jws_algorithm_hs256">true</Parameter>
			
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 9 - MAC using public Exponent">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using a the JWK representation of 
			the public exponent of the trusted public RSA key as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pubkey_e">true</Parameter>
			<!--<Parameter Key="idtoken_crit_jwk">true</Parameter>-->
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 10 - MAC using RSA Modulus">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using a the JWK representation of 
			the RSA modul as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pubkey_n">true</Parameter>
			<!--<Parameter Key="idtoken_crit_jwk">true</Parameter>-->
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 11 - MAC using kty JWK field">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using a the JWK field "kty" 
			 (keyType) of the trusted public RSA key as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pubkey_kty">true</Parameter>
			<!--<Parameter Key="idtoken_crit_jwk">true</Parameter>-->
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 12 - MAC using alg JWK field">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using a the JWK field "alg" 
			 (algorithm) of the trusted public RSA key as MAC key - "RS256".

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_pubkey_alg">true</Parameter>
			<!--<Parameter Key="idtoken_crit_jwk">true</Parameter>-->
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Key Confusion 13 - MAC using JWK JSONString">
		<Description><![CDATA[
			<h1>Key Confusion</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID Token containing a HS256 signature created using a the JSON String representation
			 of the trusted public RSA key as MAC key.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client or if the untrusted URI is requested.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.KeyConfusionOP</ImplementationClass>
			<Parameter Key="hmac_jsonstring_jwk">true</Parameter>
			<!--<Parameter Key="idtoken_crit_jwk">true</Parameter>-->
			<!--<Parameter Key="include_fresh_keyid_in_jwt_and_jwk">true</Parameter>-->
			<Parameter Key="force_success_url_fails">true</Parameter>
		</OPConfig-2>
	</TestStep>
	
	
	<TestStep Name="IdP Confusion">
		<Description><![CDATA[
			<h1>IdP Confusion</h1>
			In this test we use the Attacker OP to enforce the Client to send valid "code" issued by the Honest OP to the Attacker OP.

			<h2>Prerequisites.</h2>
			The target Client supports the code flow.
			The attacker OP returns the same "client_id" during the registration as the one registered at the Honest OP.
			In other words, the Client has same client_id on both OPs.

			<h2>Execution.</h2>
				Step 1: PrOfESSOS starts an authentication on the Client with the Honest OP. PrOfESSOS caches the received "state" and "nonce" parameters sent to the Authentication Request.
				Step 2: PrOfESSOS starts an authentication on the Client with the Malicious OP.
				Step 3: PrOfESSOS receives the Authentication Request and responds with a HTTP 302 Redirect to the Honest OP. The redirect URL contains the same parameters received in the Authentication Request except the "nonce" parameter, which is replaced by the value from Step 1.

			In case that the Client does not use the "nonce" parameter, no parameter exchange in step 3 is needed.

			<h2>Result Evaluation.</h2>
			The attack is successful if the Malicious OP receives the "code" generated by the Honest OP in the Token Request. 
			
			<h2>Mitigation</h2>
			The mitigation is currently discussed by the working groups.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.IdPConfusionBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.IdPConfusionOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.IdPConfusionOP</ImplementationClass>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Malicious Endpoint Attack">
		<Description><![CDATA[
			<h1>Malicious Endpoint Attacks</h1>
			In this test we use the Attacker OP to return maliciously crafted Discovery document and afterwards to
			create an ID Token containing the identity of the victim, which is controlled by another OP – Honest OP.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			The Attacker OP returns the following configuration during the Discovery phase.
			<pre>
			 {
				"issuer": "https://opivAttackerOP.com",
				"registration_endpoint": "https://opivHonestOP.com/register",
				"authorization_endpoint": "https://opivHonestOP.com/auth",
				"token_endpoint": "https://opivAttackerOP.com/token",
				"userinfo_endpoint": "https://opivAttackerOP.com/userinfo"
				...
			 }
			</pre>

			<h2>Result Evaluation.</h2>
			The goal of this test is to verify whether the End-User authentication can
			be broken. The attack is successful if the Attacker OP receives any secret information, for example,
			client_id, client_secret, code or access token, generated by the Honest OP.
			Injection and DoS attacks are considered out of scope for the tests provided by PrOfESSOS.
			
			<h2>Mitigation</h2>
			The mitigation of the attack is not officially specifyed yet, but currently discussed.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">true</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">true</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.InformationleakRPBrowser</ImplementationClass>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.MaliciousEndpointOP</ImplementationClass>

			<Parameter Key="force_honest_discovery_iss">false</Parameter>
			<Parameter Key="force_honest_discovery_registrationEP">true</Parameter>
			<Parameter Key="force_honest_discovery_authorizationEP">true</Parameter>
			<Parameter Key="force_honest_discovery_tokenEP">false</Parameter>
			<Parameter Key="force_honest_discovery_userinfoEP">false</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Replay Attack 1">
		<Description><![CDATA[
			<h1>Replay Attack</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token containing expired "exp" timestamp.

			<h2>Result Evaluation.</h2>
			The attack is successful if the ID token is accepted by the Client.
			
			<h2>Mitigation</h2>
			The "exp" value MUST be validated, see Step 9 in Section 
			3.1.3.7 in OpenIDConnect-Core. A satisfying value is 
			30 minutes.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">true</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.ReplayOP</ImplementationClass>
			<Parameter Key="force_idtoken_exp_oneday">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Replay Attack 2">
		<Description><![CDATA[
			<h1>Replay Attack</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token containing expired "exp" timestamp.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
			
			<h2>Mitigation</h2>
			The "exp" value MUST be validated, see Step 9 in Section 
			3.1.3.7 in OpenIDConnect-Core. A satisfying value is 
			30 minutes.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">true</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.ReplayOP</ImplementationClass>
			<Parameter Key="force_idtoken_exp_oneyear">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Replay Attack 3">
		<Description><![CDATA[
			<h1>Replay Attack</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token containing invalid "iat" timestamp.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
			
			<h2>Mitigation</h2>
			The "iat" value MUST be validated, see Step 10 in Section 
			3.1.3.7 in OpenIDConnect-Core. ID Tokens created in 
			the future should not be accepted.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">true</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.ReplayOP</ImplementationClass>
			<Parameter Key="force_idtoken_iat_oneday">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Replay Attack 4">
		<Description><![CDATA[
			<h1>Replay Attack</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token containing invalid "iat" timestamp.

			<h2>Result Evaluation.</h2>
			The attack is successful if the ID token is accepted by the Client.
			
			<h2>Mitigation</h2>
			The "iat" value MUST be validated, see Step 10 in Section 
			3.1.3.7 in OpenIDConnect-Core. ID Tokens created in 
			the future should not be accepted.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">true</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.ReplayOP</ImplementationClass>
			<Parameter Key="force_idtoken_iat_oneyear">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Replay Attack 5">
		<Description><![CDATA[
			<h1>Replay Attack</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token containing constant “nonce” value.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
			
			<h2>Mitigation</h2>
			The "nonce" value MUST be validated, see Step 11 in Section 
			3.1.3.7 in OpenIDConnect-Core. ID Tokens with invalid "nonce" values must not be accepted.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">true</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.ReplayOP</ImplementationClass>
			<Parameter Key="force_idtoken_nonce_invalidValue">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Replay Attack 6">
		<Description><![CDATA[
			<h1>Replay Attack</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token without a “nonce” parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the ID token is accepted by the Client.
			
			<h2>Mitigation</h2>
			The "nonce" value MUST be validated, see Step 11 in Section 
			3.1.3.7 in OpenIDConnect-Core. ID Tokens, which does not contain a "nonce" value must not be accepted.
			Despite the fact that the "nonce" value is optional, we advice to use it in order to mitigate CSRF attacks.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">true</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.ReplayOP</ImplementationClass>

			<Parameter Key="force_idtoken_nonce_excluded">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Session Overwriting">
		<Description><![CDATA[
			<h1>Session Overwriting</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>

			The Session Overwriting test consists of five steps and requires the participation of the Attacker OP and the Honest OP.
				Step 1: starts authentication with Honest OP
				Step 2: pause before sending the Authentication Response (code or idtoken/access token) to the SP
				Step 3: start authentication with Malicious OP within the same HTTP session as Step 1 (i.e., use the same Cookies)
				Step 4: abort Step 3 after the Malicious IdP has been contacted by the Browser from Step 3.
				Step 5: continue with Step 2 (break the pause) and sends the Authentication Response (code or idtoken/access token)

			<h2>Result Evaluation.</h2>
			The attack is successful if the ID token is accepted by the Client and the attacks is logged on the victim's account.
			
			<h2>Mitigation</h2>
			The proper usage of the "state" parameter hamper the attack, but not prevent it.
			A complete mitigation of the attack is not officially specifyed yet, but currently discussed. 
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">true</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.SessionOverwritingOPBrowser</ImplementationClass>
			<Parameter Key="browser.input.op_url">HONEST</Parameter>
			<Parameter Key="use_evil_needle">false</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.SessionOverwritingOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.SessionOverwritingOP</ImplementationClass>

		</OPConfig-2>
	</TestStep>

	<TestStep Name="Session Overwriting B">
		<Description><![CDATA[
			<h1>Session Overwriting B</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
TODO TBD
			The Session Overwriting test consists of five steps and requires the participation of the Attacker OP and the Honest OP.
				Step 1: starts authentication with Malicious OP
				Step 2: pause before sending the Authentication Response (code or idtoken/access token) to the SP
				Step 3: start authentication with Honest OP within the same HTTP session as Step 1 (i.e., use the same Cookies)
				Step 4: abort Step 3 after the Honest OP has been contacted by the Browser from Step 3.
				Step 5: continue with Step 2 (break the pause) and sends the Authentication Response (code or idtoken/access token). 
						The ID Token's "iss" claim is set to the issuer value of the Honest OP, even though the ID Token 
						is generated by the Malicious OP.

			<h2>Result Evaluation.</h2>
			The attack is successful if the ID token is accepted by the Client and the attacks is logged on the victim's account.
			
			<h2>Mitigation</h2>
			The proper usage of the "state" parameter hamper the attack, but not prevent it.
			A complete mitigation of the attack is not officially specifyed yet, but currently discussed. 
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">true</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.SessionOverwritingOPBrowser</ImplementationClass>
			<Parameter Key="browser.input.op_url">EVIL</Parameter> <!-- default -->
			<Parameter Key="use_evil_needle">false</Parameter>
			<!--<Parameter Key="force_success_url_fails">true</Parameter>-->
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.SessionOverwritingOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.SessionOverwritingOP</ImplementationClass>
			<Parameter Key="force_honest_idtoken_iss">true</Parameter>
			<Parameter Key="force_honest_idtoken_sub">true</Parameter>
		</OPConfig-2>
	</TestStep>
	
	<TestStep Name="Signature Manipulation 1">
		<Description><![CDATA[
			<h1>Signature Manipulation</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token containing wrong signature.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
			
			<h2>Mitigation</h2>
			The signature MUST be validated, see Step 6 in Section 
			3.1.3.7 in OpenIDConnect-Core.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">true</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.SignatureManipulationOP</ImplementationClass>
			<Parameter Key="force_idtoken_signature_invalidValue">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Signature Manipulation 2">
		<Description><![CDATA[
			<h1>Signature Manipulation</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token containing invalid signature and "none" algorithm.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.
			
			<h2>Mitigation</h2>
			The signature MUST be validated, see Step 6 in Section 
			3.1.3.7 in OpenIDConnect-Core. The usage of the "nonce" algorithm is allowed in "code" flow. However, in implicit flow its usage is not allowed and the ID token MUST NOT be accepted.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">true</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.SignatureManipulationOP</ImplementationClass>

			<Parameter Key="force_idtoken_header_alg_none">true</Parameter>
			<Parameter Key="force_idtoken_signature_invalidValue">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Signature Manipulation 3">
		<Description><![CDATA[
			<h1>Signature Manipulation</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token containing "none" algorithm and no signature.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.

			<h2>Mitigation</h2>
			The signature MUST be validated, see Step 6 in Section
			3.1.3.7 in OpenIDConnect-Core. The usage of the "nonce" algorithm is allowed in "code" flow. However, in implicit flow its usage is not allowed and the ID token MUST NOT be accepted.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">true</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.SignatureManipulationOP</ImplementationClass>

			<Parameter Key="force_idtoken_header_alg_none">true</Parameter>
		</OPConfig-2>
	</TestStep>

		<TestStep Name="Signature Manipulation 4">
		<Description><![CDATA[
			<h1>Signature Manipulation</h1>

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token containing "none" algorithm in a mixed-case writing ("NoNe") and no signature. This may circumvent naive blacklisting of the "none" algorithm.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client.

			<h2>Mitigation</h2>
			The signature MUST be validated, see Step 6 in Section
			3.1.3.7 in OpenIDConnect-Core. The usage of the "nonce" algorithm is allowed in "code" flow. However, in implicit flow its usage is not allowed and the ID token MUST NOT be accepted.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">true</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.SignatureManipulationOP</ImplementationClass>

			<Parameter Key="force_idtoken_header_alg_none2">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="CSRF 1">
		<Description><![CDATA[
			<h1>CSRF Protection via the "state" parameter</h1>
			PrOfESSOS tests the Validation of the "state" parameter on the Client.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			
			<h2>Execution.</h2>
			PrOfESSOS returns invalid "state" parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the Authentication Response is accepted despite the fact the the "state" parameter is missing or invalid and the next protocol steps are executed.
				Code flow: A token request containing the "code" is sent to the Attacker OP
				Implicit flow: The attacker is successfully logged on his account.
			
			<h2>Mitigation</h2>
			The "state" parameter MUST be validated, see Section 3.2.2.5. in OpenIDConnect-Core.
				1) The "state" must be bound to the End-User Session (e.g. cookies)
				2) The "state" must be bound to the sent Authentication Request.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">true</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.InvalidStateOP</ImplementationClass>

			<Parameter Key="force_state_invalidValue">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="CSRF 2">
		<Description><![CDATA[
			<h1>CSRF Protection via the “state” parameter</h1>
			PrOfESSOS tests the Validation of the "state" parameter on the Client.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			
			<h2>Execution.</h2>
			PrOfESSOS returns "state" parameter issued in another browser session.
				Step 1: The browser is startet, the authentication with the MaliciousOP is initiated and the received parameter is cached. Then, the connection is dropped.
				Step 2: A new session in the browser is started and the authentication with the MaliciousOP is initiated.
				After receiving the Authentication Request, the Authentication Response is generated. But, now the received "state" parameter from step 1 is sent back to the Client.
			
			<h2>Result Evaluation.</h2>
			The attack is successful if the Authentication Response is accepted despite the fact the the "state" parameter is missing or invalid and the next protocol steps are executed.
				Code flow: A token request containing the "code" is sent to the Attacker OP and afterwards the attacker is successfully logged on his account.
				Implicit flow: The attacker is successfully logged on his account.
			
			<h2>Mitigation</h2>
			The "state" parameter MUST be validated, see Section 3.2.2.5. in OpenIDConnect-Core.
				1) The "state" must be bound to the End-User Session (e.g. cookies)
				2) The "state" must be bound to the sent Authentication Request.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.InvalidStateRPTestBrowser</ImplementationClass>
			<Parameter Key="force_success_url_fails">true</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.InvalidStateOP</ImplementationClass>

			<Parameter Key="force_state_fromotherSession">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="CSRF 3">
		<Description><![CDATA[
			<h1>CSRF Protection via the “state” parameter</h1>
			PrOfESSOS tests the Validation of the "state" parameter on the Client.
			PrOfESSOS does not return the "state" parameter.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.

			<h2>Result Evaluation.</h2>
			The attack is successful if the Authentication Response is accepted despite the fact the the "state" parameter is missing or invalid and the next protocol steps are executed.
				Code flow: A token request containing the "code" is sent to the Attacker OP and afterwards the attacker is successfully logged on his account.
				Implicit flow: The attacker is successfully logged on his account.
			
			<h2>Mitigation</h2>
			The "state" parameter MUST be validated, see Section 3.2.2.5. in OpenIDConnect-Core.
				1) The "state" must be bound to the End-User Session (e.g. cookies)
				2) The "state" must be bound to the sent Authentication Request.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">true</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.InvalidStateOP</ImplementationClass>

			<Parameter Key="force_state_excluded">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="TRC 1">
		<Description><![CDATA[
			<h1>Token Recipient Confusion Attack</h1>
			PrOfESSOS tests the Validation of the "audience" parameter on the Client by issuing maliciously crafted ID tokens.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token, which does not contain an "audience" parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client and the attacker is logged in his account.
			
			<h2>Mitigation</h2>
			The "aud" value MUST be validated, see Step 3 in Section 
			3.1.3.7 in OpenIDConnect-Core.
			
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">true</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>

			<Parameter Key="force_idtoken_aud_excluded">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="TRC 2">
		<Description><![CDATA[
			<h1>Token Recipient Confusion Attack</h1>
			PrOfESSOS tests the Validation of the "audience" parameter on the Client by issuing maliciously crafted ID tokens.

			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token, which contains invalid "aud" parameter.

			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client and the attacker is logged in his account.
			
			<h2>Mitigation</h2>
			The "aud" value MUST be validated, see Step 3 in Section 
			3.1.3.7 in OpenIDConnect-Core.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="force_success_url_fails">true</Parameter>
			<Parameter Key="use_evil_needle">true</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>

			<Parameter Key="force_idtoken_aud_invalidValue">true</Parameter>
		</OPConfig-2>
	</TestStep>


	<TestStep Name="TRC 3">
		<Description><![CDATA[
			<h1>Token Recipient Confusion Attack</h1>
			PrOfESSOS tests the Validation of the "audience" parameter on the Client by issuing maliciously crafted ID tokens.
			The value of the "aud" is set to the "aud" value of the Client registered at the Honest OP. 
			
			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token, which contains "aud" initialized with the client_id of the Client registered at the Honest OP.
			
			<h2>Result Evaluation.</h2>
			The attack is successful if the token is accepted by the Client and the attacker is logged in his account.
			
			<h2>Mitigation</h2>
			The "aud" value MUST be validated, see Step 3 in Section 
			3.1.3.7 in OpenIDConnect-Core.
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="force_success_url_fails">true</Parameter>
			<Parameter Key="use_evil_needle">true</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.TRCOP</ImplementationClass>

			<Parameter Key="force_idtoken_honest_aud">true</Parameter>
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Sub Claim Spoofing 1">
		<Description><![CDATA[
			<h1>Sub Claim Spoofing</h1>
			PrOfESSOS tests the Validation of the "sub" parameter on the Client by returning maliciously crafted 
			userInfo responses. The UserInfo response includes "sub" and "iss" claims of another OP - HonestOP.
			
			<h2>Prerequisites.</h2>
			TODO
			
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token, which contains "sub" initialized with the client_id of the Client 
			registered at the Evil OP. When the Client requests UserInfo, a different "sub" value is returned along 
			with UserInfo parameters belonging to a subject registerd with HonestOP.
			
			<h2>Result Evaluation.</h2>
			The attack is successful if the attacker is logged in the victim's account (registered with Honest OP).
			
			<h2>Mitigation</h2>
			As per Section 5.3.2 of OpenID-Connect Core, "The sub Claim in the UserInfo Response MUST be verified 
			to exactly match the sub Claim in the ID Token; if they do not match, the UserInfo Response 
			values MUST NOT be used."
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">false</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.SubClaimSpoofingOP</ImplementationClass>

			<Parameter Key="include_honest_sub_in_userinfo">true</Parameter>
			<Parameter Key="include_honest_iss_in_userinfo">true</Parameter>
			<Parameter Key="force_honest_userinfo_name">true</Parameter>
			<Parameter Key="force_honest_userinfo_email">true</Parameter>
			
		</OPConfig-2>
	</TestStep>

	<TestStep Name="Sub Claim Spoofing 2">
		<Description><![CDATA[
			<h1>Sub Claim Spoofing</h1>
			PrOfESSOS tests the Validation of the "sub" parameter on the Client by returning maliciously crafted 
			userInfo responses. The provided UserInfo response does not include a "sub" claim but "name", "username" and "email"
			claims of another user (who was not authenticated).
			
			<h2>Prerequisites.</h2>
			TODO
			
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token, which contains "sub" initialized with the client_id of the Client 
			registered at the Evil OP. When the Client requests UserInfo, a different "sub" value is returned along 
			with UserInfo parameters belonging to a subject registerd with HonestOP.
			
			<h2>Result Evaluation.</h2>
			The attack is successful if the attacker is logged in the victim's account (registered with Honest OP).
			
			<h2>Mitigation</h2>
			As per Section 5.3.2 of OpenID-Connect Core, "The sub Claim in the UserInfo Response MUST be verified 
			to exactly match the sub Claim in the ID Token; if they do not match, the UserInfo Response 
			values MUST NOT be used."
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="force_success_url_fails">false</Parameter>
			<Parameter Key="use_evil_needle">false</Parameter>

		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.SubClaimSpoofingOP</ImplementationClass>

			<!--<Parameter Key="include_honest_sub_in_userinfo">true</Parameter>-->
			<Parameter Key="include_honest_iss_in_userinfo">true</Parameter>
			<Parameter Key="force_honest_userinfo_name">true</Parameter>
			<Parameter Key="force_honest_userinfo_username">true</Parameter>
			<Parameter Key="force_honest_userinfo_email">true</Parameter>

		</OPConfig-2>
	</TestStep>

	<TestStep Name="Sub Claim Spoofing 3">
		<Description><![CDATA[
			<h1>Sub Claim Spoofing</h1>
			PrOfESSOS tests the Validation of the "sub" parameter on the Client by returning maliciously crafted 
			userInfo responses. The provided UserInfo response does not include a "sub" claim but "name", "username" and "email"
			claims of another user (who was not authenticated).
			
			<h2>Prerequisites.</h2>
			TODO
			
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token, which contains "sub" initialized with the client_id of the Client 
			registered at the Evil OP. When the Client requests UserInfo, a different "sub" value is returned along 
			with UserInfo parameters belonging to a subject registerd with HonestOP.
			
			<h2>Result Evaluation.</h2>
			The attack is successful if the attacker is logged in the victim's account (registered with Honest OP).
			
			<h2>Mitigation</h2>
			As per Section 5.3.2 of OpenID-Connect Core, "The sub Claim in the UserInfo Response MUST be verified 
			to exactly match the sub Claim in the ID Token; if they do not match, the UserInfo Response 
			values MUST NOT be used."
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">false</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.SubClaimSpoofingOP</ImplementationClass>

			<Parameter Key="include_evil_sub_in_userinfo">true</Parameter>
			<Parameter Key="include_honest_sub_in_userinfo">true</Parameter>
			<Parameter Key="include_honest_iss_in_userinfo">true</Parameter>
			<Parameter Key="force_honest_userinfo_name">true</Parameter>
			<Parameter Key="force_honest_userinfo_username">true</Parameter>
			<Parameter Key="force_honest_userinfo_email">true</Parameter>

		</OPConfig-2>
	</TestStep>

	<TestStep Name="Sub Claim Spoofing 4">
		<Description><![CDATA[
			<h1>Sub Claim Spoofing</h1>
			PrOfESSOS tests the Validation of the "sub" parameter on the Client by returning maliciously crafted 
			userInfo responses. The provided UserInfo response does not include a "sub" claim but "name", "username" and "email"
			claims of another user (who was not authenticated).
			
			<h2>Prerequisites.</h2>
			TODO
			
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token, which contains "sub" initialized with the client_id of the Client 
			registered at the Evil OP. When the Client requests UserInfo, a different "sub" value is returned along 
			with UserInfo parameters belonging to a subject registerd with HonestOP.
			
			<h2>Result Evaluation.</h2>
			The attack is successful if the attacker is logged in the victim's account (registered with Honest OP).
			
			<h2>Mitigation</h2>
			As per Section 5.3.2 of OpenID-Connect Core, "The sub Claim in the UserInfo Response MUST be verified 
			to exactly match the sub Claim in the ID Token; if they do not match, the UserInfo Response 
			values MUST NOT be used."
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="force_success_url_fails">false</Parameter>
			<Parameter Key="use_evil_needle">false</Parameter>

		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.SubClaimSpoofingOP</ImplementationClass>

			<Parameter Key="include_honest_sub_in_userinfo">true</Parameter>
			<Parameter Key="include_evil_sub_in_userinfo">true</Parameter>
			<Parameter Key="include_honest_iss_in_userinfo">true</Parameter>
			<Parameter Key="force_honest_userinfo_name">true</Parameter>
			<Parameter Key="force_honest_userinfo_email">true</Parameter>
			<Parameter Key="force_honest_userinfo_username">true</Parameter>


		</OPConfig-2>
	</TestStep>

	<TestStep Name="Sub Claim Spoofing 5">
		<Description><![CDATA[
			<h1>Sub Claim Spoofing</h1>
			PrOfESSOS tests the Validation of the "sub" parameter on the Client by returning maliciously crafted 
			userInfo responses. The provided UserInfo response does not include a "sub" claim but "name", "username" and "email"
			claims of another user (who was not authenticated).
			
			<h2>Prerequisites.</h2>
			TODO
			
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token, which contains "sub" initialized with the client_id of the Client 
			registered at the Evil OP. When the Client requests UserInfo, an invalid response is returned that contains
			a JSON array for the "sub" value: 
			
			<h2>Result Evaluation.</h2>
			The attack is successful if the attacker is logged in the victim's account (registered with Honest OP).
			
			<h2>Mitigation</h2>
			As per Section 5.3.2 of OpenID-Connect Core, "The sub Claim in the UserInfo Response MUST be verified 
			to exactly match the sub Claim in the ID Token; if they do not match, the UserInfo Response 
			values MUST NOT be used."
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">false</Parameter>
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.SubClaimSpoofingOP</ImplementationClass>

			<Parameter Key="include_sub_claims_as_json_array">true</Parameter>
			<Parameter Key="include_evil_sub_in_userinfo">true</Parameter>
			<Parameter Key="include_honest_sub_in_userinfo">true</Parameter>
			<Parameter Key="include_honest_iss_in_userinfo">true</Parameter>
			<Parameter Key="force_honest_userinfo_name">true</Parameter>
			<Parameter Key="force_honest_userinfo_username">true</Parameter>
			<Parameter Key="force_honest_userinfo_email">true</Parameter>

		</OPConfig-2>
	</TestStep>

	<TestStep Name="Sub Claim Spoofing 6">
		<Description><![CDATA[
			<h1>Sub Claim Spoofing</h1>
			PrOfESSOS tests the Validation of the "sub" parameter on the Client by returning maliciously crafted 
			userInfo responses. The provided UserInfo response does not include a "sub" claim but "name", "username" and "email"
			claims of another user (who was not authenticated).
			
			<h2>Prerequisites.</h2>
			TODO
			
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token, which contains "sub" initialized with the client_id of the Client 
			registered at the Evil OP. When the Client requests UserInfo, a different "sub" value is returned along 
			with UserInfo parameters belonging to a subject registerd with HonestOP.
			
			<h2>Result Evaluation.</h2>
			The attack is successful if the attacker is logged in the victim's account (registered with Honest OP).
			
			<h2>Mitigation</h2>
			As per Section 5.3.2 of OpenID-Connect Core, "The sub Claim in the UserInfo Response MUST be verified 
			to exactly match the sub Claim in the ID Token; if they do not match, the UserInfo Response 
			values MUST NOT be used."
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="force_success_url_fails">false</Parameter>
			<Parameter Key="use_evil_needle">false</Parameter>

		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.SubClaimSpoofingOP</ImplementationClass>

			<Parameter Key="include_sub_claims_as_json_array">true</Parameter>
			<Parameter Key="include_honest_sub_in_userinfo">true</Parameter>
			<Parameter Key="include_evil_sub_in_userinfo">true</Parameter>
			<Parameter Key="include_honest_iss_in_userinfo">true</Parameter>
			<Parameter Key="force_honest_userinfo_name">true</Parameter>
			<Parameter Key="force_honest_userinfo_email">true</Parameter>
			<Parameter Key="force_honest_userinfo_username">true</Parameter>


		</OPConfig-2>
	</TestStep>
	
	<TestStep Name="Sub Claim Spoofing 7">
		<Description><![CDATA[
			<h1>Sub Claim Spoofing (ID Token Header)</h1>
			PrOfESSOS tests the validation of the "sub" parameter on the client by returning a maliciously crafted 
			ID Token.
			
			<h2>Prerequisites.</h2>
			The target Client supports the implicit or the code flow.
			
			<h2>Execution.</h2>
			PrOfESSOS issues an ID token with an JWT Header that contains claims about the victims subject and/or
			the HonestOP iss claim.
			
			<h2>Result Evaluation.</h2>
			The attack is successful if the attacker is logged in the victim's account (registered with Honest OP).
			
			<h2>Mitigation</h2>
			TODO
			
		]]>
		</Description>
		<TestParameters>
			<Parameter Key="discovery_support_needed">false</Parameter>
			<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>
		</TestParameters>
		<BrowserSimulator>
			<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>
			<Parameter Key="use_evil_needle">false</Parameter>
			<!--<Parameter Key="force_success_url_fails">true</Parameter>-->
		</BrowserSimulator>
		<OPConfig-1>
			<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>
		</OPConfig-1>
		<OPConfig-2>
			<ImplementationClass>de.rub.nds.oidc.server.op.SubClaimSpoofingOP</ImplementationClass>

			<Parameter Key="token_header_add_claims">true</Parameter>
			<Parameter Key="force_token_header_honest_iss">true</Parameter>
			<Parameter Key="force_token_header_honest_sub">true</Parameter>
			<Parameter Key="force_token_header_honest_email">true</Parameter>
			<!--<Parameter Key="force_honest_userinfo_iss">true</Parameter>-->

		</OPConfig-2>
	</TestStep>

	<!--TODO: Same as SubClaim Spoofing 7 but actually encrypt the JWT Payload-->
	<!--<TestStep Name="Sub Claim Spoofing 8">-->
		<!--<Description><![CDATA[-->
			<!--<h1>Sub Claim Spoofing (ID Token Header)</h1>-->
			<!--PrOfESSOS tests the validation of the "sub" parameter on the client by returning a maliciously crafted -->
			<!--ID Token.-->
			<!---->
			<!--<h2>Prerequisites.</h2>-->
			<!--The target Client supports the implicit or the code flow.-->
			<!---->
			<!--<h2>Execution.</h2>-->
			<!--PrOfESSOS issues an ID token with an JWT Header that contains claims about the victims subject and/or-->
			<!--the HonestOP iss claim.-->
			<!---->
			<!--<h2>Result Evaluation.</h2>-->
			<!--The attack is successful if the attacker is logged in the victim's account (registered with Honest OP).-->
			<!---->
			<!--<h2>Mitigation</h2>-->
			<!---->
		<!--]]>-->
		<!--</Description>-->
		<!--<TestParameters>-->
			<!--<Parameter Key="discovery_support_needed">false</Parameter>-->
			<!--<Parameter Key="dynamic_client_registration_support_needed">false</Parameter>-->
		<!--</TestParameters>-->
		<!--<BrowserSimulator>-->
			<!--<ImplementationClass>de.rub.nds.oidc.browser.DefaultRPTestBrowser</ImplementationClass>-->
			<!--<Parameter Key="use_evil_needle">false</Parameter>-->
			<!--&lt;!&ndash;<Parameter Key="force_success_url_fails">true</Parameter>&ndash;&gt;-->
		<!--</BrowserSimulator>-->
		<!--<OPConfig-1>-->
			<!--<ImplementationClass>de.rub.nds.oidc.server.op.DefaultOP</ImplementationClass>-->
		<!--</OPConfig-1>-->
		<!--<OPConfig-2>-->
			<!--<ImplementationClass>de.rub.nds.oidc.server.op.SubClaimSpoofingOP</ImplementationClass>-->

			<!--<Parameter Key="token_header_add_claims">true</Parameter>-->
			<!--<Parameter Key="token_encrypt_payload">true</Parameter>--> <!-- TODO: not implemented -->
			<!--<Parameter Key="force_token_header_honest_iss">true</Parameter>-->
			<!--<Parameter Key="force_token_header_honest_sub">true</Parameter>-->
			<!--<Parameter Key="force_token_header_honest_email">true</Parameter>-->
			<!--&lt;!&ndash;<Parameter Key="force_honest_userinfo_iss">true</Parameter>&ndash;&gt;-->

		<!--</OPConfig-2>-->
	<!--</TestStep>-->
	
</TestPlan>
